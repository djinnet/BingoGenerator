@page "/"
@inject BingoService BingoService
@inject IJSRuntime Js
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject NavigationManager uriHelper

@if (bingoCard == null)
{
    <h1>Loading the bingo card</h1>
}
else
{
<div class="bingo-image-container" id="bingo-image-container">

    @if (BingoService.IsDebug())
    {
        <img src="../Title.png" alt="Image" class="bingo-image" />
    }
    else
    {
        <img src="./Title.png" alt="Image" class="bingo-image" />

    }

    <h1 style="color:white;">BINGO</h1>
    <p style="color:white;">This current version is made for the BETA & Early Access version of KINDRED FATES.</p>
        <p style="color:white;">
            See more about us in 
            <NavLink class="nav-link" href="about">
                About Website
            </NavLink>
        </p>
    <div class="@(selectedBingoVersion == EBingoVersion.FiveByFive ? "bingo-card5x5" : "bingo-card3x9")">
    @for (int row = 0; row < bingoCard.Rows; row++)
    {
        @for (int col = 0; col < bingoCard.Columns; col++)
        {
            <BingoCell CellContent="@bingoCard.GetCellValue(row, col)" />
        }
    }
    </div>
</div>
<div>
    <label style="color:white;">
        <input type="checkbox" @bind="allowDuplicates" /> Allow Duplicates
    </label>
    <label style="color:white;">
        <input type="checkbox" @bind="includeFreeSpace" /> Include Free Space
    </label>

    <label style="color:white;">Card type:<br>
    @foreach (var versionCard in (EBingoVersion[])Enum.GetValues(typeof(EBingoVersion)))
    {
        @if (IsEqual(versionCard))
        {
            <input type="radio" name="@("version-" + versionCard)" id="@versionCard" value="@versionCard" style="color:white;"
            @onchange="OnChangeRadioSelection" checked />
            <text>&nbsp;</text>

            @versionCard
        }else{
            <input type="radio" name="@("version-" + versionCard)" id="@versionCard" value="@versionCard" style="color:white;"
            @onchange="OnChangeRadioSelection" />
            <text>&nbsp;</text>

            @versionCard
        }
        <br>
    }
    </label>

    <button @onclick="RegenerateCard">
        Save the options & Regenerate Bingo Card
    </button>
    <button @onclick="Print">
        Print PDF
    </button>
</div>
<div>
    <p style="color:white;">Known issues: Click on the print button may cause the deselected radio buttons. This is fixed by refresh the page automatically after 2 secs in the code, so you dont have to worry about it.</p>
    <p style="color:white;">Credit to Skymill Studio &amp; BottledDucky on discord</p>
</div>
}

@code {
    private EBingoVersion selectedBingoVersion = EBingoVersion.FiveByFive;
    private bool allowDuplicates = false;
    private bool includeFreeSpace = true;
    private BingoCard? bingoCard;
    string RadioValue = "FiveByFive";
    

    protected override void OnInitialized()
    {
        // Load options from localStorage
        LoadOptions();
        GenerateCard();
    }

    private void GenerateCard()
    {
        bingoCard = BingoService.GenerateBingoCard(allowDuplicates, includeFreeSpace, selectedBingoVersion);
    }

    private void RegenerateCard()
    {
        GenerateCard();
        SaveOptions();
        StateHasChanged();
    }


    private void OnChangeRadioSelection(ChangeEventArgs args)
    {
        if (args == null) return;
        if (args.Value == null) return;
        string? value = args.Value.ToString();
        if (string.IsNullOrEmpty(value)) return;
        RadioValue = value;
        Enum.TryParse(RadioValue, out selectedBingoVersion);
        bingoCard = null;
        GenerateCard();
        StateHasChanged();
    }

    private bool IsEqual(EBingoVersion version)
    {
        return RadioValue.Equals(version.ToString(), StringComparison.OrdinalIgnoreCase);
    }

    private async Task Print()
    {
        await Js.InvokeVoidAsync("printInvoke", new PayloadData(RadioValue));
        //await Js.InvokeVoidAsync("Test");
        var timer = new Timer(new TimerCallback(_ =>
            {
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            }), null, 2000, 2000);
        
    }

    private void LoadOptions()
    {
        if (bool.TryParse(localStorage.GetItem<string>("allowDuplicates"), out bool storedAllowDuplicates))
        {
            allowDuplicates = storedAllowDuplicates;
        }

        if (bool.TryParse(localStorage.GetItem<string>("includeFreeSpace"), out bool storedIncludeFreeSpace))
        {
            includeFreeSpace = storedIncludeFreeSpace;
        }

        var value = localStorage.GetItem<string>("RadioValue");

        if (value != null)
        {
            RadioValue = value;
            Enum.TryParse(RadioValue, out selectedBingoVersion);
        }
        
    }

    private void SaveOptions()
    {
        localStorage.SetItem("allowDuplicates", allowDuplicates.ToString());
        localStorage.SetItem("includeFreeSpace", includeFreeSpace.ToString());
        localStorage.SetItem("RadioValue", RadioValue);
    }
}