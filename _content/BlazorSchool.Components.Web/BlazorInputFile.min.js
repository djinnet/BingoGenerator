export function StartUploadingWithChunkSize(i,r,u){n[i]={file:i.files[0],internalControl:{pause:!1},internalBlazorInputFile:r,internalChunkSize:u,currentChunk:0};let f=n[i];return t(i),{Size:f.file.size,Name:f.file.name,Type:f.file.type,WebkitRelativePath:f.file.webkitRelativePath,LastModified:f.file.lastModified}}export function Pause(t){n[t].internalControl.pause=!0}export function Cancel(t){n[t].internalControl.pause=!0;n[t].currentChunk=0;t.value=""}export function Resume(i){n[i].internalControl.pause=!1;t(i)}async function t(t){let i=n[t],r=Math.ceil(i.file.size/i.internalChunkSize);for(t.disabled=!0;i.currentChunk<r;){if(n[t].internalControl.pause)break;let r=i.currentChunk*i.internalChunkSize,u=i.file.slice(r,r+i.internalChunkSize),f=await u.arrayBuffer(),e=new Uint8Array(f);await i.internalBlazorInputFile.invokeMethodAsync("AppendValueAsync",e);i.currentChunk++}t.disabled=!1}let n={};